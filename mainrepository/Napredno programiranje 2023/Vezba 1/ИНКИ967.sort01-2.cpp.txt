#include <iostream>
using namespace std;
  
// функција за натрупање на дрвото
void heapify(int arr[], int n, int root)
{
   int largest = root; // коренот е најголемиот елемент
   int l = 2*root + 1; // лево = 2 * корен + 1
   int r = 2*root + 2; // десно = 2 * корен + 2
  
   // ако левото дете е поголемо од коренот тогаш
   if (l < n && arr[l] > arr[largest])
   largest = l;
  
   // ако десното дете е поголемо од најголемото досега тогаш
   if (r < n && arr[r] > arr[largest])
   largest = r;
  
   // ако најголемиот не е коренот тогаш
   if (largest != root)
      {
      //размени корен и најголем
      swap(arr[root], arr[largest]);
  
      //рекурзивно натрупајте го под-стеблото
      heapify(arr, n, largest);
      }
}
  
// спроведување на сортирање на куповите
void heapSort(int arr[], int n)
{
   // градиме  грамада
   for (int i = n / 2 - 1; i >= 0; i--)
   heapify(arr, n, i);
  
   // ги вадиме елементите од грамадата еден по еден
   for (int i=n-1; i>=0; i--)
   {
      //го поместуваме тековниот корен до крајот
      swap(arr[0], arr[i]);
  
      // повторно го повикуваме max heapify на намалениот куп
      heapify(arr, i, 0);
   }
}
  
/* ја  печатиме содржината на низата - корисна функција */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}
  
// главната програма
int main()
{
   int heap_arr[] = {4,17,3,12,9,6};
   int n = sizeof(heap_arr)/sizeof(heap_arr[0]);
   cout<<"Влезна низа"<<endl;
   displayArray(heap_arr,n);
  
   heapSort(heap_arr, n);
  
   cout << "Подредена низа"<<endl;
   displayArray(heap_arr, n);
}
// Кодот е функција која прикажува низа од цели броеви. Кодот започнува со декларирање на променливата arr како цела низа со n елементи, која ќе ги држи вредностите од 0 до n-1.
// Следно, тој прогласува за јамка што се повторува низ секој елемент во низата и ја отпечатува неговата вредност со помош на cout.